#include <WiFi.h>
#include <SocketIoClient.h>
#include <ArduinoJson.h>

const char* ssid = "Happytime";
const char* password = "AZ8597cool";

const char* host = "getapackpack.com";  // ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Æ‡∏™‡∏ï‡πå
const uint16_t port = 443;              // ‡∏û‡∏≠‡∏£‡πå‡∏ï HTTPS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WSS
const char* url = "api/ws/";        // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á WebSocket

WiFiClientSecure wifiClient;
SocketIoClient socketIO;

//Event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏™‡πà‡∏á ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ server 
///‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß
void SenProduct_is_taken(){
  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON Document
  StaticJsonDocument<64> doc;
  doc["slotId"] = "1"; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ slotId ‡πÄ‡∏õ‡πá‡∏ô "‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"

  /// ‡πÅ‡∏õ‡∏•‡∏á JSON Document ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á
  String jsonPayload;
  serializeJson(doc, jsonPayload);

  /// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô socketIO.emit()
  socketIO.emit("product_is_taken", jsonPayload.c_str());

  Serial.println("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '1' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Event 'product_is_taken'");
  Serial.print("üì§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á: ");
  Serial.println(jsonPayload);
}

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß
void SenRefill_slot() {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON Document
  StaticJsonDocument<64> doc;
  doc["slotId"] = "1"; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ slotId ‡πÄ‡∏õ‡πá‡∏ô "‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
  // ‡πÅ‡∏õ‡∏•‡∏á JSON Document ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á
  String jsonPayload;
  serializeJson(doc, jsonPayload);

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô socketIO.emit()
  socketIO.emit("refill_slot", jsonPayload.c_str());
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô Serial Monitor
  Serial.println("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '1' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Event 'refill_slot'");
  Serial.print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á: ");
  Serial.println(jsonPayload);
}

void SenChange_product_details(){
  StaticJsonDocument<200> doc; //‡∏™‡∏£‡πâ‡∏≤‡∏á Json Document
  // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô JSON
  doc["slotId"] = "1";
  doc["name"] = "minere";
  doc["description"] = "100ml 5bottles";
  doc["price"] = 500.50;
  doc["imageBuffer"] = "data.image";
  doc["brand_id"] = "select_brand_id";

  // ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á
  String jsonPayload;
  serializeJson(doc, jsonPayload);

  socketIO.emit("change_product_details",jsonPayload.c_str());
  Serial.println("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Event 'change_product_details'");
  Serial.print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á: ");
  Serial.println(jsonPayload);
}

void SenAdd_new_brand(){
  StaticJsonDocument<64> doc;
  doc["name"] = "New Brand";
  String jsonPayload;
  serializeJson(doc, jsonPayload);
  socketIO.emit("Add_new_brand", jsonPayload.c_str());
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô Serial Monitor
  Serial.println("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '1' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Event 'Add_new_brand'");
  Serial.print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á: ");
  Serial.println(jsonPayload);
}

//Event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏£‡∏±‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å server 
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ‡∏ä‡∏∑‡πà‡∏≠ "order_is_placed"
void onOrderIsPlaced(const char* payload, size_t length) {
  Serial.println("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Event 'order_is_placed' ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
  Serial.print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: ");
  Serial.println(payload);

  // ‡πÅ‡∏õ‡∏•‡∏á JSON (‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON)
  StaticJsonDocument<128> doc;
  DeserializationError error = deserializeJson(doc, payload);
  if (error) {
    Serial.print("JSON parse error: ");
    Serial.println(error.c_str());
    return;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ slotId
  const char* slotId = doc["slotId"];
  if (slotId) {
    Serial.print("Slot ID: ");
    Serial.println(slotId);
  }
}
//‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πà‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ‡∏ä‡∏∑‡∏∑‡πà‡∏≠‡∏≠ "Order is canceled"
void onOrder_is_canceled(const char* payload, size_t length){
  Serial.println("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Event 'Order_is_canceled' ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
  Serial.print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: ");
  Serial.println(payload);

  // ‡πÅ‡∏õ‡∏•‡∏á JSON (‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON)
  StaticJsonDocument<128> doc;
  DeserializationError error = deserializeJson(doc, payload);
  if (error) {
    Serial.print("JSON parse error: ");
    Serial.println(error.c_str());
    return;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ slotId
  const char* slotId = doc["slotId"];
  if (slotId) {
    Serial.print("Slot ID: ");
    Serial.println(slotId);
  }
}

void onOrder_times_out(const char* payload, size_t length){
  Serial.println("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Event 'order_times_out' ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
  Serial.print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: ");
  Serial.println(payload);

  // ‡πÅ‡∏õ‡∏•‡∏á JSON (‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON)
  StaticJsonDocument<128> doc;
  DeserializationError error = deserializeJson(doc, payload);
  if (error) {
    Serial.print("JSON parse error: ");
    Serial.println(error.c_str());
    return;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ slotId
  const char* slotId = doc["slotId"];
  if (slotId) {
    Serial.print("Slot ID: ");
    Serial.println(slotId);
  }
}

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi
void checkWiFi() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi ‡πÉ‡∏´‡∏°‡πà...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    Serial.println("\n‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!");
  }
}

//‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Scoket
void checkWebSocket() {
  static unsigned long lastReconnectAttempt = 0;
  if (millis() - lastReconnectAttempt > 5000) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    lastReconnectAttempt = millis();
    Serial.println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡πÉ‡∏´‡∏°‡πà...");
    socketIO.beginSSL(host, port, url); // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
  }
}

void setup() {
  Serial.begin(115200);
  checkWiFi();
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WiFiClientSecure
  wifiClient.setInsecure();

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö WebSocket Server
  wifiClient.setInsecure();
  socketIO.beginSSL(host, port, url);
  Serial.println("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

  // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Event handlers
  socketIO.on("connect", [](const char* payload, size_t length) {
    Serial.println("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  });
  socketIO.on("order_is_placed", onOrderIsPlaced);
  socketIO.on("order_is_canceled", onOrder_is_canceled);

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  //SenProduct_is_taken();
  //SenRefill_slot();
  //SenChange_product_details();
  //SenAdd_new_brand();
}

void loop() {
   static bool initialized = false;
  if (!initialized) {
    Serial.println("ESP32 is running...");
    initialized = true;
  }
  delay(1000);
  // ‡∏ü‡∏±‡∏á Event ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
  socketIO.loop();
  checkWiFi();
  checkWebSocket();
}
